							****PROCEDURY****
//Przykład 1:


USE AdventureWorks2019;
GO

CREATE PROCEDURE DodajNoweZamowienie
	@CustomerID INT,
	@OrderDate DATE,
	@ProductID INT,
	@Quantity INT

AS
BEGIN
	DECLARE @OrderID INT;

	INSERT INTO Sales.SalesOrderHeader (CustomerID, OrderDate)
	VALUES (@CustomerID, @OrderDate);

	SET @OrderID = SCOPE_IDENTITY();

	INSERT INTO Sales.SalesOrderDetail (SalesOrderID, ProductID, OrderQty)
	VALUES (@OrderID, @ProductID, @Quantity);

END;




//Przykład 2:


USE AdventureWorks2019;
GO

CREATE PROCEDURE PobierzSzczegolyZamowienia
	@OrderID INT

AS
BEGIN
	SELECT sod.SalesOrderID, sod.ProductID, p.Name AS ProductName, sod.OrderQty
	FROM Sales.SalesOrderDetail sod
	INNER JOIN Production.Product p ON sod.ProductID = p.ProductID
	WHERE sod.SalesOrderDetailID = @OrderID;
END;




//Przykład 3:


USE AdventureWorks2019;
GO

CREATE PROCEDURE AktualizujDaneKlienta
	@CustomerID INT,
	@NewName NVARCHAR(50),
	@NewEmail NVARCHAR(100)

AS
BEGIN
	UPDATE Sales.Customer
	SET Name = @NewName,
		Email = @NewEmail
	WHERE CustomerID = @CustomerID;
END;



							****TRIGGERY****



//Przykład 1:


USE AdventureWorks2019;
GO

CREATE TRIGGER LogowanieZmianProdunktow
ON Production.Product
AFTER INSERT, UPDATE, DELETE

AS
BEGIN
	IF EXISTS (SELECT * FROM inserted) OR EXISTS (SELECT * FROM deleted)
	BEGIN
		INSERT INTO dbo.ProductChangeLog (ChangeDate, Action)
		VALUES (GETDATE(), 'Zmiana w tabeli Produkt');
	END;
END;




//Przykład 2:




USE AdventureWorks2019;
GO

CREATE TRIGGER AktualizacjaStanuMagazynowego
ON Sales.SalesOrderDetail
AFTER INSERT

AS
BEGIN
	UPDATE Production.ProductInventory
	SET Quantity = Quantity - i.OrderQty
	FROM Production.ProductInventory pi
	JOIN inserted i ON pi.ProductID = i.ProductID;
END;




//Przykład 3:


USE AdventureWorks2019;
GO

CREATE TRIGGER SprawdzaniePoprawnosciDanych
ON Sales.SalesOrderDetail
AFTER DELETE

AS
BEGIN
	IF EXISTS (SELECT * FROM Production.ProductInventory WHERE Quantity < 0)
	BEGIN
		RAISERROR('Usunięcie zamówienia spowoduje ujemny stan magazynowy!', 16, 1);
		ROLLBACK TRANSACTION;
	END;
END;





							****FUNCTIONS****


//Przykład 1:


USE AdventureWorks2019;
GO

CREATE FUNCTION PobierzIloscZamowieniaKlienta
(
	@CustomerID INT
)

RETURNS INT 
AS
BEGIN
	DECLARE @OrderCount INT;

	SELECT @OrderCount = COUNT(*)
	FROM Sales.SalesOrderHeader
	WHERE CustomerID = @CustomerID;

	RETURN @OrderCount;
END;







//Przykład 2:


USE AdventureWorks2019;
GO

CREATE FUNCTION ObliczWartoscZamowienia
(
	@OrderID INT
)

RETURNS MONEY
AS
BEGIN
	DECLARE @TotalAmount MONEY;

	SELECT @TotalAmount = SUM(UnitPrice * OrderQty)
	FROM Sales.SalesOrderDetail
	WHERE SalesOrderID = @OrderID

	RETURN @TotalAmount;
END;







//Przykład 3:

USE AdventureWorks2019;
GO

CREATE FUNCTION KonwertujDate
(
	@DateIn INT
)

RETURNS DATE
AS
BEGIN
	DECLARE @DateOut DATE;

	SELECT @DateOut = CONVERT(DATE, CONVERT(VARCHAR(8), @DateIn), 112);


	RETURN @DateOut;
END;





